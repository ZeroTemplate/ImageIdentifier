{"name":"Imageidentifier","tagline":"Small application for identifying images based on the header data.","body":"### Image Identifier\r\nThis is a simple application that matches the known headers of files with the known human readable ones (JPG/BMP ... and so on).\r\nFor now only 2 of those are implemented (JPG and BMP) in the next iterations new ones will be added.\r\n\r\n### How it works\r\nEach image has it's own class, using the factory method for linking the file with the needed class. (needed for future expanding of the requirements)\r\nThe logic of finding and creating each object for the files is located in the factory `fileFactory` class. \r\n\r\nFor example the BMP and JPG headers are stored like this:\r\n\r\n`       std::vector<std::uint8_t> BMPBytes = {0x42, 0x4D};\r\n        std::vector<std::uint8_t> JPGBytes = {0xFF, 0xD8, 0xFF};`\r\n\r\nFor expanding the existing code, there are 2 steps:\r\n* creating a new class `file<imageType>` and inherit the existing `imageFile` class.\r\n* extend the existing factory class to include the new image type :\r\n      * by incrementing the number of existing `IMG_OBJ_CODED`\r\n      * by adding the new type into the existing `enum IMG_TYPE`\r\n      * by adding the new header into the constructor:\r\n\r\n`          fileFactory() {`\r\n              `std::vector<std::uint8_t> BMPBytes = {0x42, 0x4D};`\r\n              `std::vector<std::uint8_t> JPGBytes = {0xFF, 0xD8, 0xFF};`\r\n              `Register(IMG_TYPE::BMP, &fileBMP::Create, BMPBytes);`\r\n              `Register(IMG_TYPE::JPG, &fileJPG::Create, JPGBytes);`\r\n           `}`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}